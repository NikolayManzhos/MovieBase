apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

apply from: "$rootDir/tools/jacoco.gradle"

def keystoreProperties = new Properties()
def keyFile = rootProject.file("keystore.properties")
if (!keyFile.exists()) {
    keystoreProperties.setProperty "MovieDbSecretKey", System.getenv("MovieDbSecretKey")
    keystoreProperties.setProperty "YoutubeSecretKey", System.getenv("YoutubeSecretKey")
} else {
    keystoreProperties.load(new FileInputStream(keyFile))
}

configurations.getByName("androidTestCompile") {
    resolutionStrategy {
        force "com.android.support:appcompat-v7:$support"
    }
}

android {
    signingConfigs {
        release
    }
    compileSdkVersion 27
    buildToolsVersion "27.0.1"
    defaultConfig {
        applicationId "com.defaultapps.moviebase"
        testInstrumentationRunner 'com.defaultapps.moviebase.CustomTestRunner'
        vectorDrawables.useSupportLibrary = true
        minSdkVersion 17
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
            debuggable true
            minifyEnabled false
            shrinkResources false
            multiDexEnabled true
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ext.enableCrashlytics = false
        }
    }
    buildTypes.each {
        it.buildConfigField 'String', 'MDB_API_KEY', keystoreProperties['MovieDbSecretKey']
        it.resValue 'string', 'YOUTUBE_API_KEY', keystoreProperties['YoutubeSecretKey']
        it.proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }

    sourceSets {
        main {
            def resPath = 'src/main/res'
            res.srcDirs =
                    [
                            "${resPath}/layouts/home",
                            "${resPath}/layouts/discover",
                            "${resPath}/layouts/bookmarks",
                            "${resPath}/layouts/search",
                            "${resPath}/layouts/genre",
                            "${resPath}/layouts/movie",
                            "${resPath}/layouts/custom_views",
                            "${resPath}/layouts/user",
                            "${resPath}/layouts/person",
                            "${resPath}/layouts/login",
                            "${resPath}/layouts",
                            "${resPath}"
                    ]
        }
        test.resources.srcDirs += 'src/main/assets'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        disable 'InvalidPackage'
    }
}

dependencies {
    implementation(
            "com.android.support:appcompat-v7:$support",
            "com.android.support:preference-v7:$support",
            "com.android.support:design:$support",
            "com.android.support:cardview-v7:$support",
            "com.android.support:customtabs:$support",
            "com.android.support.constraint:constraint-layout:$constraintLayout",
            "com.roughike:bottom-bar:$bottomBar",
            //ButterKnife
            "com.jakewharton:butterknife:$butterKnife",
            //Dagger 2
            "com.google.dagger:dagger:$dagger",
            //RxJava 2
            "io.reactivex.rxjava2:rxandroid:$rxandroid",
            "io.reactivex.rxjava2:rxjava:$rxjava",
            //Retrofit 2
            "com.squareup.retrofit2:retrofit:$retrofit",
            "com.squareup.retrofit2:converter-gson:$retrofit",
            "com.squareup.retrofit2:adapter-rxjava2:$retrofit",
            "com.squareup.okhttp3:logging-interceptor:$okhttpVersion",
            //Firebase
            "com.google.firebase:firebase-core:$firebase",
            "com.firebaseui:firebase-ui-auth:$firebaseUi",
            "com.firebaseui:firebase-ui-database:$firebaseUi",
            //Timber
            "com.jakewharton.timber:timber:$timber",
            //Prefs
            "com.nikolaymanzhos:preferenceshelper:$prefs",
            //EasyBind
            "com.nikolaymanzhos:easybind:$easybind",
            //Picasso
            "com.squareup.picasso:picasso:$picasso",
            //Iconify
            "com.joanzapata.iconify:android-iconify-material:$iconify",
            //Custom UI libraries
            "de.hdodenhof:circleimageview:$circle",
            "com.thefinestartist:ytpa:$youtube",
            "com.yarolegovich:mp:$materialPref",
            "com.miguelcatalan:materialsearchview:$materialSearch",
            "com.ms-square:expandableTextView:$expTextView"
    )

    implementation("com.crashlytics.sdk.android:crashlytics:$crashlyticsSdk").transitive true

    annotationProcessor(
            "com.jakewharton:butterknife-compiler:$butterKnife",
            "com.google.dagger:dagger-compiler:$dagger",
            "com.nikolaymanzhos:easybind-compiler:$easybind"
    )

    debugImplementation (
            //LeakCanary
            "com.squareup.leakcanary:leakcanary-android:$leakcanary"
    )

    testImplementation (
            "junit:junit:$junit",
            "org.mockito:mockito-core:$mockito",
            "io.github.benas:random-beans:$random_beans",
            "org.robolectric:robolectric:$robolectric",
            "org.robolectric:shadows-support-v4:$robolectric_shadow",
            "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary"
    )

    androidTestImplementation (
            "com.android.support.test.espresso:espresso-contrib:$espresso",
            "org.mockito:mockito-core:$mockito"
    )
    androidTestImplementation("com.android.support.test.espresso:espresso-core:$espresso", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}
apply plugin: 'com.google.gms.google-services'
apply from: "$rootDir/tools/signing.gradle"
