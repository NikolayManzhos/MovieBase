apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

apply plugin: 'jacoco'
apply from: "$rootDir/jacoco.gradle"

def keystoreProperties = new Properties()
def file = rootProject.file("keystore.properties");
if (!file.exists()) {
    keystoreProperties.setProperty "MovieDbSecretKey", System.getenv("MovieDbSecretKey")
    keystoreProperties.setProperty "YoutubeSecretKey", System.getenv("YoutubeSecretKey")
} else {
    keystoreProperties.load(new FileInputStream(file))
}

def isDebug = false;

afterEvaluate {
    if (isDebug)  {
        assembleDebug.dependsOn 'testDebugUnitTest'
    } else  {
        assembleRelease.dependsOn 'testDebugUnitTest', 'lintRelease'
    }
}

configurations.getByName("androidTestCompile") {
    resolutionStrategy {
        force "com.android.support:appcompat-v7:$support"
    }
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"
    defaultConfig {
        applicationId "com.defaultapps.moviebase"
        testInstrumentationRunner 'com.defaultapps.moviebase.CustomTestRunner'
        minSdkVersion 17
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            isDebug = true
            debuggable true
            minifyEnabled false
            shrinkResources false
            multiDexEnabled true
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }
    buildTypes.each {
        it.buildConfigField 'String', 'MDB_API_KEY', keystoreProperties['MovieDbSecretKey']
        it.resValue 'string', 'YOUTUBE_API_KEY', keystoreProperties['YoutubeSecretKey']
        it.proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }

    sourceSets {
        main {
            def resPath = 'src/main/res'
            res.srcDirs =
                    [
                            "${resPath}/layouts/home",
                            "${resPath}/layouts/discover",
                            "${resPath}/layouts/bookmarks",
                            "${resPath}/layouts/search",
                            "${resPath}/layouts/genre",
                            "${resPath}/layouts/movie",
                            "${resPath}/layouts/custom_views",
                            "${resPath}/layouts/user",
                            "${resPath}/layouts/person",
                            "${resPath}/layouts",
                            "${resPath}"
                    ]
        }
        test.resources.srcDirs += 'src/main/assets'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        disable 'InvalidPackage'
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:$support"
    compile "com.android.support:preference-v7:$support"
    compile "com.android.support:design:$support"
    compile "com.android.support:cardview-v7:$support"
    compile "com.android.support:customtabs:$support"
    compile "com.android.support.constraint:constraint-layout:$constraintLayout"
    compile "com.roughike:bottom-bar:$bottomBar"
    //ButterKnife
    compile "com.jakewharton:butterknife:$butterKnife"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterKnife"
    //Dagger 2
    compile "com.google.dagger:dagger:$dagger"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger"
    //RxJava 2
    compile "io.reactivex.rxjava2:rxandroid:$rxandroid"
    compile "io.reactivex.rxjava2:rxjava:$rxjava"
    //Retrofit 2
    compile "com.squareup.retrofit2:retrofit:$retrofit"
    compile "com.squareup.retrofit2:converter-gson:$retrofit"
    compile "com.squareup.retrofit2:adapter-rxjava2:$retrofit"
    compile "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"
    //Firebase
    compile "com.google.firebase:firebase-core:$firebase"
    compile "com.firebaseui:firebase-ui-auth:$firebaseUi"
    compile "com.firebaseui:firebase-ui-database:$firebaseUi"
    //LeakCanary
    debugCompile "com.squareup.leakcanary:leakcanary-android:$leakcanary"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary"
    //Timber
    compile "com.jakewharton.timber:timber:$timber"
    //Prefs
    compile "com.github.nikolaymanzhos:preferenceshelper:$rootProject.prefs"
    //Picasso
    compile "com.squareup.picasso:picasso:$rootProject.picasso"
    //Iconify
    compile "com.joanzapata.iconify:android-iconify-material:$rootProject.iconify"
    //Custom UI libraries
    compile "de.hdodenhof:circleimageview:$circle"
    compile "com.thefinestartist:ytpa:$youtube"
    compile "com.yarolegovich:mp:$materialPref"
    compile "com.miguelcatalan:materialsearchview:$materialSearch"
    compile "com.ms-square:expandableTextView:$expTextView"



    testCompile "junit:junit:$junit"
    testCompile "org.mockito:mockito-core:$mockito"
    testCompile "io.github.benas:random-beans:$random_beans"
    testCompile "org.robolectric:robolectric:$robolectric"
    testCompile "org.robolectric:shadows-support-v4:$robolectric"
    androidTestCompile "com.android.support:appcompat-v7:$support"
    androidTestCompile "com.android.support:design:$support"
    androidTestCompile "com.android.support:cardview-v7:$support"
    androidTestCompile("com.android.support.test.espresso:espresso-core:$espresso", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile "com.android.support.test.espresso:espresso-contrib:$espresso"
    androidTestCompile "org.mockito:mockito-core:$mockito"
}
apply plugin: 'com.google.gms.google-services'
